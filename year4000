#!/bin/bash
# /etc/init.d/year4000

### BEGIN INIT INFO
# Provides:   year4000
# Required-Start: $local_fs $remote_fs $mysqld $mysql $mongo
# Required-Stop:  $local_fs $remote_fs $mysqld $mysql $mongo
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  4 5 6
# Default-Stop:   0 1 6
# Short-Description: Year4000 Service Script
# Description: Runs multiple Minecraft screen process as a service
#       this service will safely start, stop, restart each screen.
#       This script will allow you to update and run various tasks.
### END INIT INFO

# Script Configuration Setting
USER="root"
SERVER_SETTINGS="~/servers.cfg"

# Load Settings
. $SERVER_SETTINGS

# Run commands as the user supplied in $USER
command() {
    ME=`whoami`
    if [ $ME == $USER ] ; then
        bash -c "$1"
    else
        su $USER -c "$1"
    fi
}

# Check if the screen is running.
is_running() {
    if ps ax | grep java | grep ${SERVER_NAME[$1]} > /dev/null ; then
        return 0
    else
        return 1
    fi
}

# Checks if the server is running then send a message.
get_running() {
    if is_running "$1" ; then
        echo "Server ${SERVER_NAME[$1]} is on."
    else
        echo "Server ${SERVER_NAME[$1]} is off."
    fi
}

# Start the server with the index of the array.
start_server() {
    echo "Starting the server ${SERVER_NAME[$1]}... "

    if is_running "$1" ; then
        command "cd ${SERVER_PATH[$1]} && screen -dmS ${SERVER_NAME[$1]} ${START_ARGS[$1]}"
    else
        command "cd ${SERVER_PATH[$1]} && screen -dmS ${SERVER_NAME[$1]} ${START_ARGS[$1]}"
    fi
}

# Stop the server with the index of the array.
stop_server() {
    echo "Stoping the server ${SERVER_NAME[$1]}... "

    if is_running "$1" ; then
        for i in {20..0} ; do
            command "screen -rx ${SERVER_NAME[$1]} -X eval 'stuff \"${MSG_CMD[$1]} ${SHUTDOWN_MSG[$1]} $i\"\015'"
            sleep 1
        done
        command "screen -rx ${SERVER_NAME[$1]} -X eval 'stuff \"${SHUTDOWN_CMD[$1]}\"\015'"
        sleep 10
        command "screen -XS ${SERVER_NAME[$1]} kill"
    fi
}

# Restart the server with the index if the array.
restart_server() {
    echo "Trying to restart the server ${SERVER_NAME[$1]}... "

    if is_running "$1" ; then
        stop_server $1
        sleep 5
        start_server $1
    else
        start_server $1
    fi
}

# Service Start Arguments
SERVERS=${#SERVER_NAME[@]}
case "$1" in
    start)
        if [ $2 ] ; then
            start_server $2
        else
            for (( i = 0; i < $SERVERS; i++ )) ; do
                start_server $i
                sleep 1
            done
        fi
    ;;

    stop)
        if [ $2 ] ; then
            stop_server $2
        else
            for (( i = 0; i < $SERVERS; i++ )) ; do
                stop_server $i
                sleep 1
            done
        fi
     ;;

    restart)
        if [ $2 ] ; then
            restart_server $2
        else
            for (( i = 0; i < $SERVERS; i++ )) ; do
                restart_server $i 
                sleep 1
            done
        fi
     ;;

    status)
        if [ $2 ] ; then
            get_running $2
        else
            for (( i = 0; i < $SERVERS; i++ )) ; do
                get_running $i
                sleep 1
            done
        fi
     ;;

    *)
        echo "Usage: {start|stop|restart|status}"
        exit 1
    ;;
esac

exit 0

