#!/bin/bash
# /etc/init.d/year4000

### BEGIN INIT INFO
# Provides:   year4000
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: Year4000 Service Script
# Description: Runs multiple Minecraft screen process as a service
#       this service will safely start, stop, restart each screen.
#       This script will allow you to update and run various tasks.
### END INIT INFO

# Script Configuration Setting
USER="root"

# BungeeCord Server Settings
SERVER_NAME[0]="bungeecord"
SERVER_PATH[0]="/y4k/bungeecord"
SERVER_JAR[0]="BungeeCord.jar"
UPDATE_JAR[0]="BungeeCord.jar"
START_ARGS[0]="java -server -Xmx256m -XX:+UseConcMarkSweepGC -jar BungeeCord.jar"
UPDATE_URL[0]="http://ci.md-5.net/job/BungeeCord/lastSuccessfulBuild/artifact/bootstrap/target/"
SHUTDOWN_CMD[0]="end"
MSG_CMD[0]="alert"
SHUTDOWN_MSG[0]="Proxy shutting down in"

# Survival Server Settings
SERVER_NAME[1]="survival"
SERVER_PATH[1]="/y4k/survival"
SERVER_JAR[1]="minecraft_server.jar"
UPDATE_JAR[1]="spigot.jar"
START_ARGS[1]="java -server -Xmx2G -XX:+UseConcMarkSweepGC -XX:ParallelGCThreads=2 -jar minecraft_server.jar"
UPDATE_URL[1]="http://ci.md-5.net/job/Spigot-1.7/lastSuccessfulBuild/artifact/Spigot-Server/target/"
SHUTDOWN_CMD[1]="stop"
MSG_CMD[1]="say"
SHUTDOWN_MSG[1]="Server shutting down in"

# Creative Server Settings
SERVER_NAME[2]="creative"
SERVER_PATH[2]="/y4k/creative"
SERVER_JAR[2]="minecraft_server.jar"
UPDATE_JAR[2]="spigot.jar"
START_ARGS[2]="java -server -Xmx2G -XX:+UseConcMarkSweepGC -XX:ParallelGCThreads=2 -jar minecraft_server.jar"
UPDATE_URL[2]="http://ci.md-5.net/job/Spigot-1.7/lastSuccessfulBuild/artifact/Spigot-Server/target/"
SHUTDOWN_CMD[2]="stop"
MSG_CMD[2]="say"
SHUTDOWN_MSG[2]="Server shutting down in"

# Run commands as the user supplied in $USER
function command {
    ME=`whoami`
    if [ $ME == $USER ]; then
        bash -c "$1"
    else
        su - $USER -c "$1"
    fi
}

# Check if the server is running.
function is_running {
    if ps ax | grep SCREEN | grep ${SERVER_NAME[$1]} > /dev/null; then
        return 0
    else
        return 1
    fi
}

# Checks if the server is running then send a message.
function get_running {
    if is_running "$1"; then
        echo "Running"
    else
        echo "Not Running"
    fi
}

# Start the server with the index of the array.
function start_server {
    echo -n "Trying to start the server ${SERVER_NAME[$1]}... "

    if is_running "$1"; then
        echo "All Ready Running"; sleep 2
        return
    else
        command "cd ${SERVER_PATH[$1]} && screen -dmS ${SERVER_NAME[$1]} ${START_ARGS[$1]}"; sleep 2
    fi

    get_running $1
}

# Stop the server with the index of the array.
function stop_server {
    echo -n "Trying to stop the server ${SERVER_NAME[$1]}... "

    if is_running "$1"; then
        for i in {60..0}; do
            command "screen -p 0 -S ${SERVER_NAME[$1]} -X eval 'stuff \"${MSG_CMD[$1]} ${SHUTDOWN_MSG[$1]} $i\"\015'" ; sleep 1
        done
        command "screen -rx ${SERVER_NAME[$1]} -X eval 'stuff \"${SHUTDOWN_CMD[$1]}\"\015'" ; sleep 5
    fi

    get_running $1
}

# Restart the server with the index if the array.
function restart_server {
    echo "Trying to restart the server ${SERVER_NAME[$1]}... "

    if is_running "$1"; then
        stop_server $1
        start_server $1
    else
        start_server $1
    fi
}

# Stop / Update / Start the server.
function update_server {
    if is_running "$1"; then
        stop_server $1
    fi
    command "cd ${SERVER_PATH[$1]} && rm -f ${SERVER_JAR[$1]}"
    command "cd ${SERVER_PATH[$1]} && wget ${UPDATE_URL[$1]}${UPDATE_JAR[$1]}"
    command "cd ${SERVER_PATH[$1]} && chmod +x ${UPDATE_JAR[$1]}"
    command "cd ${SERVER_PATH[$1]} && mv ${UPDATE_JAR[$1]} ${SERVER_JAR[$1]}"
    start_server $1
}

# Service Start Arguments
SERVERS=${#SERVER_NAME[@]}
case "$1" in
    start)
        if [ $2 ]; then
            start_server $2
        else
            for (( i=0;i<$SERVERS;i++ )); do
                start_server $i
            done
        fi
    ;;

    stop)
        if [ $2 ]; then
            stop_server $2
        else
            for (( i=0;i<$SERVERS;i++ )); do
                stop_server $i
            done
        fi
     ;;

    restart)
        if [ $2 ]; then
            restart_server $2
        else
            for (( i=0;i<$SERVERS;i++ )); do
                restart_server $i
            done
        fi
     ;;

    status)
        if [ $2 ]; then
            echo -n "Server status ${SERVER_NAME[$2]}... "
            get_running $2
        else
            for (( i=0;i<$SERVERS;i++ )); do
                echo -n "Server status ${SERVER_NAME[$i]}... "
                get_running $i
            done
        fi
     ;;

    update)
        if [ $2 ]; then
            update_server $2
        else
            for (( i=0;i<$SERVERS;i++ )); do
                update_server $i
            done
        fi
     ;;

    *)
        echo "Usage: {start|stop|restart|update|status}"
        exit 1
    ;;
esac

exit 0
